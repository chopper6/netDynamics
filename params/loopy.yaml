# main parameter file
# YAML is like JSON, but with more minimal syntax and allows comments
# parse.py also adds support for scientific notation in the form: 10^8

debug : true # adds various checks, may cause slow down
verbose : true # prints out more info 
print_lap : 10 # how many laps before another print statement. only if verbose 

parallelism : 10^2 # number of networks to run in parallel (on my desktop 10^5 is the limit with fumia network)
num_samples : 10^2 # number of initial states tested. false to turn off (and use only max_laps instead)
steps_per_lap : 10^4 # number of times to update net in a lap, unless 'lap_stop_rule' is triggered
# note that 'steps_per_lap' is also the assumed transient period for async update methods
update_rule : 'async' # node update scheme: 'sync', 'async', or 'Gasync' 
# WARNING: async is not efficiently implemented, recommended only to compare with Gasync
# Gasync = "generalized async" where a subset of nodes are sync updated each step 

loopy_reps: 4
steady_basin: 0
async_trim: 0


PBN : # probabilistic boolean network
  active : 0
  flip_pr : 0.01  
  init : 'uniform' # half or uniform # REMOVE JP
  float : false # represent node states by floats (just broken)
skips_precise_oscils : True
track_x0: True # only for v small nets, when measuring ensemble properties from same init
                # for large nets this is not only useless, but will significantly slow simulation

# implementation details
steps_per_lap_gain : 2 # how steps per lap increases as oscillations are not found, set to 1 to turn off
fraction_per_lap : .9 # fraction of networks needed to satisfy stop condition to exit a lap
clause_bin_size : 4 # number of clauses each threads merges at once

# input
model_file: 'models/sahin.bnet'
setting_file: 'settings/sahin.yaml'
parity_model_file: 'models/sahinExp.bnet'
use_inputs_in_pheno: 0
fig_legend : 1
use_phenos: 0

# output
output_dir : 'output/loopy/'
output_img : 'async_lowFlip_long.png'
savefig : 1 # as opposed to showing the image